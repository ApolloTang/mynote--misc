
Explaining DockerFile with an example:
======================================

First we check out a project:

  $ git clone https://github.com/venky8283/Docker.git
  $ cd Docker
  $ git checkout d469419582ee877067f6d449c9691ad16e5f3365

The above check out a project that contain a "Dockerfile":
    .
    ├── Dockerfile
    ├── README.md
    ├── app.py
    ├── requirements.txt
    └── templates
        └── form.html

The "DockerFile" has the instruction to build a docker image from
the code in the checked out repo. To build images we do the folowing:

  $ docker build -t flask_app:1.0 .  # this buid the images using instruction in "DockerFile"
                                     # and name the image "flask_app" with tag "1.0"
                                     #
                                     # IMPORTANT there is a '.' at the end of this command
                                     #   which denotes that the current directory is the location
                                     #   of the DockerFile

  $ docker images
  REPOSITORY                TAG                 IMAGE ID            CREATED             SIZE
  flask_app                 1.0                 13fbf1a63363        19 minutes ago      895MB
  ...


You can examine the layer of the image with "history":

  $ docker history apollotang/date_project:1.0
  IMAGE          CREATED         CREATED BY                           SIZE     COMMENT
  53909f9d7a5f   5 months ago    bash                                 21.9MB   Added today's date file
  <missing>      5 months ago    /bin/sh -c #(nop)  CMD ["python3"]   0B
  ...
  ...


The content of the DockerFile is:

    FROM python:3.9-rc-buster    # Base Python Image for App
    WORKDIR /code                # Working directory in container
    ENV FLASK_APP app.py         # Export env variables.
    ENV FLASK_RUN_HOST 0.0.0.0
    COPY requirements.txt requirements.txt   # Copy dependencies spec from host to /code in container
    RUN pip3 install -r requirements.txt     # Install dependencies in container
    COPY . .                                 # Copy everything from host to containers code directory
    CMD ["flask", "run"]                     # RUN app.

Note the different between RUN command and CMD command:

  The "RUN" instruction execute a commands in a new layer
  on top of the current image and commit the results.
  The resulting committed image will be used for the next step
  in the Dockerfile.

  "CMD" runs the command inside the container once a container is
  created from an image.
  You can only have one CMD instruction in a Dockerfile. If multiple
  CMD instructions are used, the last one will be executed.

To run the app in the containers:

  $ docker run -p 5000:5000 flask_app:1.0

In the above the project folder and docker is isolated
so if you update the source code you have to rebuild the image.
But you can use Bind Mount (-v) to sync code in host to code
in conatainer:

  $ docker run -v /abs/path/to/repo/proj/folder:/code -p 5001:5000 flask_app:1.0



