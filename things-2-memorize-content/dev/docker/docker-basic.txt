
containers housekeeping
========================

  $ docker ps                   # shows all running containers
  $ docker ps -a                # shows all runnings and exited container
  $ docker ps -f status=exited  # shows all exited containers
                                # -f is short for --filter,
                                #    filter condition is status=exited

  $ docker ps -q                # show all running containers but displays only the IDs
                                #  -q is short for --quiet

  $ docker stop CONTAINER                # stop a running container
  $ docker rm CONTAINER1 [CONTAINER2]... # remove container(s)

  tips:
  `````
    Remove all exited containers:
      $ docker rm $(docker ps -a -q -f status=exited)

    Removes all running containers:
      $ docker rm $(docker stop $(docker ps -q))

    If all container has already stopped, you can remove all containers with:
      $ docker rm $(docker ps -a -q)


image housekeeping
===================

  $ docker pull IMAGE:TAG  # download the specified image from Docker registry
  $ docker images          # lists the Docker images on your system.
  $ docker rmi IMAGE       # remove the specified image.
                             [!] make sure no container is using the image you want to remove
                                 you must stop and delete their respective container before removing an image

  To browse for more images, go to hub.docker.com/explore



docker housekeeping
====================

    $ docker system  # Gets the Docker system information such
                     # as memory usage and housekeeping stuff

    $ docker system prune   # free up memory


create, start, run, exec
========================

  $ docker create    # create a new container from an image
  $ docker start     # run a specified container

  $ docker run       # = docker create + docker start + docker attach.
                     # attach = run in foreground
                     # To run in detached mode (background), use the "-d" option
                     # To reattach a detached use: "$ docker attach <container>"

  $ docker exec      # executes a command in an already running container
                     # you must provide a command you want to run
                     # in the container

  Docker is not a virtual machine, "$ docker run ubuntu" will exit immediately.
  For a container to run, a live process must be running inside.
  Once the running process is completed, the container stop. To run a process inside:

    $ docker run <container>[:<tag>] <command to execute in the container>

    Egs:
      $ docker run ubuntu sleep 5                      # Run ubuntu for 5 sec in sleep mode.
      $ docker run 'ubuntu:17.10' cat /etc/os-release  # Run ubuntu and cat os-information

  If the container is already running, you can use "exec" to run a command inside.

    $ docker exec <running container> <command to execute in the container>

    Eg: $ docker run -d busybox sleep 100                 # run boxbox in sleep mode for 100s
        $ docker ps -q                                    # check it is running
        58073f8e8037
        $ docker exec festive_chatterjee cat etc/hosts    # execute a command inside
        127.0.0.1 localhost
        ::1 localhost ip6-localhost ip6-loopback


running a container interactively
================================

  $ docker run -it CONTAINER <command to execute in the container>

      -i  interactive mode
      -t  pseudo tty terminal

    The following example runs the bash shell in a container interactively.
    In the interactive shell, it installs nano, creates a python script and runs it.

    $ docker run -it python:3.5 bash
      > root@12df4d6fab05:/# apt update
      > root@12df4d6fab05:/# apt install nano
      > root@12df4d6fab05:/# cat > today_date.py
        from datetime import datetime
        print("Today's date is "+ datetime.utcnow().strftime("%Y-%m-%d"))
        ^D
      > root@12df4d6fab05:/# python today_date.py
        Today's date is 2020-09-13

      > root@12df4d6fab05:/# exit

     $ docker ps -a
     CONTAINER ID        IMAGE                   COMMAND                  CREATED             STATUS    .....
     12df4d6fab05        python:3.5              "bash"                   8 minutes ago       Exited (0).....


commit, tag, push
==================

  $ docker commit -m "MESSAGE" CONTAINER  NEW_IMAGE_NAME:TAG
  $ docker login
  $ docker tag IMAGE:TAG DOCKER_USERID/IMAGE:TAG
  $ docker push


  Example (continue from above):

    $ docker ps -a
    CONTAINER ID        IMAGE                   COMMAND                  CREATED             STATUS    .....
    12df4d6fab05        python:3.5              "bash"                   8 minutes ago       Exited (0).....
    ....

    $ docker commit -m "Added today's date file" 12d date_project:1.0
    sha256:53909f9d7a5f9ece9b19b4f6e7fc1c5c221bbb82e4ea060b5794a4448317252c

    $ docker images
    REPOSITORY             TAG                 IMAGE ID            CREATED              SIZE
    date_project           1.0                 53909f9d7a5f        About a minute ago   893MB
    python                 3.5                 3687eb5ea744        3 days ago           871MB
    .....

    $ docker login
    Authenticating with existing credentials...
    Login Succeeded

    $ docker tag date_project:1.0 apollotang/date_project:1.0

    % docker images
    REPOSITORY                TAG                 IMAGE ID            CREATED             SIZE
    apollotang/date_project   1.0                 53909f9d7a5f        4 minutes ago       893MB
    date_project              1.0                 53909f9d7a5f        4 minutes ago       893MB
    python                    3.5                 3687eb5ea744        3 days ago          871MB
    ....

    $ docker push apollotang/date_project:1.0
    The push refers to repository [docker.io/apollotang/date_project]
    a412e4d527ec: Pushed
    95d78f868723: Mounted from library/python
    .....
    1.0: digest: sha256:b4a10351aa3f7a39c1c8d639b8134aedb93450edf03f1aa65c1f86e8780fca1d size: 2429

  Now you can pull the above image on another computer:

    $ docker pull apollotang/date_project:1.0












