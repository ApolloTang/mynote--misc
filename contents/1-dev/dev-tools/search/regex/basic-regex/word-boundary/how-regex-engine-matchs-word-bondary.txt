
How regex engine matchs word boundary
=====================================

This article explain how word boundary works in Gnu grep's basic regular expression
(More precisely, word boundary should be called character boundary):

Regex engine sees a boudary: 
  1. between a pair of character, 
  2. a character and ^,
  3. a character and $

Consider a string "1 cat, 2 cats!" the boudaries are marked with single quote
as follow:

  '1' 'c'a't',' '2' 'c'a't's'!'

There are two kinds of boudaries: the word-charecter-boundary and the non-word-charecter-bondary.

  Boundary type                regex
  ------------------------------------
  word-charecter-boundary      \b
  non-word-charecter-boundary  \B

word-character-boundary exists between:

  1. word-character and non-word-character:
       w|#, #|w  (legend: w=word-character, #=non-word-character, |=word boundary)
       
  2. word-character and begining of string:
       ^|w
       
  3. word-character and end of string:
       w|$
  
  Note: word-character are [0-9][a-z][A-Z][_] 
       
non-word-character-boundary exists between:

  a. word-characters:
       w`w    (legend: `=non-word-boundary)
       
  b. non-word-characters:
       #`#
       
  c. non-word-character and begining of string
       ^`#
       
  d. non-word-character and end of string
       #`$
       
The following we marks the type of boundary in the string "1 cat, 2 cats!" 
with reason:

  2 1 1 a a 1 b 1 1 1 a a a 1 d   <--- resaons
  |1| |c`a`t|,` |2| |c`a`t`s|!`
     s         s   s              (s marks the space characters)

To illustarate how the match works, let's see the following example:

$ echo '1 cat, 2 cats!' | ggrep --color '.\b.'
1 cat, 2 cats!
mm  mm  mm  mm     (legend: m marks the character that matched)
      mm

  match target : "^|1| |c`a`t|,` |2| |c`a`t`s|!`$"
  match pattern: ".|."

   "^|1| |c`a`t|,` |2| |c`a`t`s|!`$"
   ".|."                               non-match "^1", b/c "." cannot match "^"

   "^|1| |c`a`t|,` |2| |c`a`t`s|!`$"
     ".|."                             match "1 "

   "^|1| |c`a`t|,` |2| |c`a`t`s|!`$"
         ".|."                         non-match "ca"

   "^|1| |c`a`t|,` |2| |c`a`t`s|!`$"
             ".|."                     match "t,",

   "^|1| |c`a`t|,` |2| |c`a`t`s|!`$"
                 ".|."                 match " 2"

   "^|1| |c`a`t|,` |2| |c`a`t`s|!`$"
                     ".|."             match " 2"

   "^|1| |c`a`t|,` |2| |c`a`t`s|!`$"
                         ".|."         non-match "at"

   "^|1| |c`a`t|,` |2| |c`a`t`s|!`$"
                             ".|."     match "s!"

   "^|1| |c`a`t|,` |2| |c`a`t`s|!`$"
                                 ".|." non-match "$"


Another example:

% echo '1 cat, 2 cats!' | ggrep --color '.\B.'
1 cat, 2 cats!
  mm mm  mm
           mm

  match target : "^|1| |c`a`t|,` |2| |c`a`t`s|!`$"
  match pattern: ".`."

   "^|1| |c`a`t|,` |2| |c`a`t`s|!`$"
   ".`."                               non-match "^1"

   "^|1| |c`a`t|,` |2| |c`a`t`s|!`$"
     ".`."                             non-match "1 "

   "^|1| |c`a`t|,` |2| |c`a`t`s|!`$"
       ".`."                           non-match " c"

   "^|1| |c`a`t|,` |2| |c`a`t`s|!`$"
         ".`."                         match "ca"

   "^|1| |c`a`t|,` |2| |c`a`t`s|!`$"
             ".`."                     non-match "t,"

   "^|1| |c`a`t|,` |2| |c`a`t`s|!`$"
               ".`."                   match ", "

   "^|1| |c`a`t|,` |2| |c`a`t`s|!`$"
                   ".`."               non-match "2 "

   "^|1| |c`a`t|,` |2| |c`a`t`s|!`$"
                     ".`."             non-match " c"

   "^|1| |c`a`t|,` |2| |c`a`t`s|!`$"
                       ".`."           match "ca"

   "^|1| |c`a`t|,` |2| |c`a`t`s|!`$"
                           ".`."       match "ts"

   "^|1| |c`a`t|,` |2| |c`a`t`s|!`$"
                               ".`."   non-match "!$", b/c "." cannot match "$"




